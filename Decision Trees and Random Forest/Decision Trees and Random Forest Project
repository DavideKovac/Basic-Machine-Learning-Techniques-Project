#!/usr/bin/env python
# coding: utf-8

# Random Forest Project 
# 
#This projecct work on data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.
# 
# Lending club had a [very interesting year in 2016](https://en.wikipedia.org/wiki/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.
# 
#The data used is  from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full.The csv has the data already cleaned (No NA)
# 
# Here are what the columns represent:
# * credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.
# * purpose: The purpose of the loan (takes values "credit_card", "debt_consolidation", "educational", "major_purchase", "small_business", and "all_other").
# * int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.
# * installment: The monthly installments owed by the borrower if the loan is funded.
# * log.annual.inc: The natural log of the self-reported annual income of the borrower.
# * dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).
# * fico: The FICO credit score of the borrower.
# * days.with.cr.line: The number of days the borrower has had a credit line.
# * revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).
# * revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).
# * inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.
# * delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.
# * pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).

#Import the Libraries

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

#Load the data

df=pd.read_csv('loan_data.csv')


#Check the info(), head(), and describe() methods

df.info()

df.head()

df.describe()


# Data Analysis
# 
#Histogram of two FICO distributions on top of each other, one for each credit.policy outcome

plt.figure(figsize=(15,7))
df[df['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',
                                              bins=30,label='Credit.Policy=1')
df[df['credit.policy']==0]['fico'].hist(alpha=0.5,color='blue',
                                              bins=30,label='Credit.Policy=0')
plt.legend()
plt.xlabel('FICO')

#Histogram of two FICO distributions on top of each other, one for each not.fully.paid outcome column

plt.figure(figsize=(15,7))
df[df['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',
                                              bins=30,label='not.fully.paid=1')
df[df['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='blue',
                                              bins=30,label='not.fully.paid=0')
plt.legend()
plt.xlabel('FICO')


#Countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid.

plt.figure(figsize=(15,7))
sns.countplot(x='purpose',data=df,hue='not.fully.paid')


#Jointplot that describe the trend between FICO score and interest rate.

plt.figure(figsize=(15,7))
sns.jointplot(x='fico',y='int.rate',data=df)


#Lmplots to see if the trend differed between not.fully.paid and credit.policy.

sns.lmplot(x='fico',y='int.rate',data=df,hue='credit.policy',
           col='not.fully.paid')

#Check the data again

df.info()


#Categorical Features converted to fit the model



cat_feats=['purpose']

final_data=pd.get_dummies(df,columns=cat_feats,drop_first=True) 

final_data.head()

#Set the data, split to train and test data/result

from sklearn.model_selection  import train_test_split
X = final_data.drop('not.fully.paid',axis=1)
y = final_data['not.fully.paid']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

#Create and train the tree model

from sklearn.tree import DecisionTreeClassifier

dtree=DecisionTreeClassifier()
dtree.fit(X_train,y_train)

#Predictions and Evaluation of Decision Tree

pred=dtree.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(classification_report(y_test,pred))

#Training with the Random Forest model

from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier(n_estimators=200)

rfc.fit(X_train,y_train)

#Predictions and Evaluation


pred = rfc.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(classification_report(y_test,pred))
print(confusion_matrix(y_test,pred))


#Comparing the to tree models the Random Forest one is the one performing better