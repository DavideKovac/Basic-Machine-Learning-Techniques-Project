#!/usr/bin/env python
# coding: utf-8

# Linear Regression Project
# 
#This is a project for an Ecommerce company based in New York City that sells clothing online but they also have in-store style and clothing advice sessions. Customers come in to the store, have sessions/meetings with a personal stylist, then they can go home and order either on a mobile app or website for the clothes they want.
# The company is trying to decide whether to focus their efforts on their mobile app experience or their website.(The data are not for real customer/shop, just for studying purpose)

#import libraries needed
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("whitegrid")
get_ipython().run_line_magic('matplotlib', 'inline')


# This are the data in the csv file:
# 
#Avg. Session Length: Average session of in-store style advice sessions.
#Time on App: Average time spent on App in minutes
#Time on Website: Average time spent on Website in minutes
#Length of Membership: How many years the customer has been a member. 

df=pd.read_csv('Ecommerce Customers')


#check data information and df information

df.head()

df.info()

df.describe()


# Data Exploration
# 
# Jointplot that compare the Time on Website and Yearly Amount Spent columns.

sns.jointplot(x='Time on Website',y='Yearly Amount Spent',data=df)

# Jointplot that compare the Time on App and Yearly Amount Spent columns

sns.jointplot(x='Time on App',y='Yearly Amount Spent',data=df)

#2D hex bin plot comparing Time on App and Length of Membership.

sns.jointplot(x='Time on App',y='Yearly Amount Spent',data=df,kind='hex')

#Exploration of the relationship in the dataset/dataframe

sns.pairplot(df)

# A linear model plot of  Yearly Amount Spent vs. Length of Membership.

sns.lmplot(x='Length of Membership',y='Yearly Amount Spent',data=df,markers='x')

#Read the columns again

df.columns

#define the x and y for test purpose (x data, y result)

x=df[['Avg. Session Length', 'Time on App',
       'Time on Website', 'Length of Membership']]
y=df['Yearly Amount Spent']

#Split the test and train data

from sklearn.model_selection  import train_test_split

X_train,x_test,Y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=101)

#Create and train the LinearRegression model

from sklearn.linear_model import LinearRegression

lm=LinearRegression()

lm.fit(X_train,Y_train)

#check coeffiecnt of the model

lm.coef_


#Predicting the result with the test data


predictions=lm.predict(x_test)


#Scatter plot that compare prediction with actual results


plt.scatter(y_test,predictions)


#Evaluate the model 

from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

#Check if the difference between the actual result and prediction is normally distributed

sns.distplot((y_test-predictions))


#create a df to get the result asked by the client(if it is better spend on webstie or app)


coeff_df = pd.DataFrame(lm.coef_,x.columns,columns=['Coefficient'])
coeff_df


#Interpretetion of data 
# For a increase of 1 unit(hour) in the avg session there is an increase of 25 pound spent
# For an intrese of 1 unit(hour) in total on the app there is an increase of 38 pound spent
# For an increase of 1 unit(hour) in total time on the webisite there is an increase of just 0.19 pound
# For an increase of 1 unit(year) of membership there is an increase of 61 pound spent annualy

#Final Conclusion
# The company have two option: 1. Spend more on the app since it's making more money to them or 2. invest on the website  to make this get closer to make the same profit of the app

