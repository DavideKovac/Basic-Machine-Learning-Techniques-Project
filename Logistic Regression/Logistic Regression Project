#!/usr/bin/env python
# coding: utf-8

# # Logistic Regression Project 
# 
# In this project we will be working with a fake advertising data set, indicating whether or not a particular internet user clicked on an Advertisement. We will try to create a model that will predict whether or not they will click on an ad based off the features of that user.
# 
# The data set contains the following features:
# 
# * 'Daily Time Spent on Site': consumer time on site in minutes
# * 'Age': cutomer age in years
# * 'Area Income': Avg. Income of geographical area of consumer
# * 'Daily Internet Usage': Avg. minutes a day consumer is on the internet
# * 'Ad Topic Line': Headline of the advertisement
# * 'City': City of consumer
# * 'Male': Whether or not consumer was male
# * 'Country': Country of consumer
# * 'Timestamp': Time at which consumer clicked on Ad or closed window
# * 'Clicked on Ad': 0 or 1 indicated clicking on Ad

#Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
get_ipython().run_line_magic('matplotlib', 'inline')

#Get the data from the CSV
ad_data=pd.read_csv('advertising.csv')

#Check daat head,info and describtion
ad_data.head()

ad_data.describe()

ad_data.info()

#Data Analysis
#Histogram of the user age

sns.histplot(ad_data['Age'],bins=30)

#Joint plot that describe the comparison between the age and the Area Income

sns.jointplot(x='Age',y='Area Income',data=ad_data)

#Jointplot showing the kde distributions of Daily Time spent on site vs. Age.**

sns.jointplot(x='Age',y='Daily Time Spent on Site',data=ad_data,kind="kde")

#Jointplot of 'Daily Time Spent on Site' vs. 'Daily Internet Usage'**

sns.jointplot(x='Daily Time Spent on Site',y='Daily Internet Usage',data=ad_data)

#Pairplot with the hue defined by the 'Clicked on Ad' column feature.**

sns.pairplot(ad_data,hue='Clicked on Ad')

#Splitting the data into x and y

x=ad_data[['Area Income','Daily Internet Usage','Daily Time Spent on Site','Age','Male']]
y=ad_data['Clicked on Ad']

#Splitting the test data/result and train data/result

from sklearn.model_selection import train_test_split

X_train,x_test,Y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=101)

#Create and train the model with the train data

from sklearn.linear_model import LogisticRegression

logmodel=LogisticRegression()
logmodel.fit(X_train,Y_train)

#Predict the test result

predictions=logmodel.predict(x_test)

#Creation of a classification report to see how the model behaved

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))

